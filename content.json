[{"title":"coding月记系列（一）","date":"2017-07-23T06:26:51.000Z","path":"2017/07/23/coding月记系列（一）/","text":"coding 月记系列(一)前言开辟这个系列主要便是为了实时的记录自己的coding心得，更新周期会在一个月到两个月之间。一来是面向自己的学习记录，二来要是有幸分享应当会是不错的材料。 关于代码设计随着代码量的增多，我想我能够写出合适的代码的能力应该有所长进，所谓的合适的代码我想应该满足以下的几点: 良好的语法认识 能够在合理的时候利用语言特性和语法糖增强代码的可读性。例如: 适当使用Java8的steam代替Java5中的foreach。 使用注解标定类型分别处理 清晰的对象封装 保持良好的对象领域分层，在web应用中更加重要，PO``VO``DO``DTO正确区分和使用，良好的对象使用与分层可以保证代码责权使用的清晰，逻辑和物理上业务上的对应。 例如:计算一系列的数据，可以有如下操作: 创建对象类，设定计算的参数 以结构体的形式传入参数 设定相关函数方法，如:参数更新、参数计算、结果输出 责权分明的函数处理 责权分明的函数应该具有的特性: 使用安全性:只有特定的对象才可以访问 操作无副作用性:使用不会对其他对象产生影响(SRP原则) 调用明确性:进行委托时其他无关类不应该参与处理 统一且有效的代码风格 这一点应当是对于团队内部而言的，应当有流程文档加以约束，有code review环节加以规范。 关于对上述几点的具体补充，我以目前的想法进行理解和说明(期待今后更新和有新的感悟) 关于最近的一点点体会对象的粒度 创建对象的时机 数据库层的映射和选取例如:PO以及DO 业务逻辑中所使用的变量及其特有的方法如DTO 展示视图的特有数据，一般来说DTO已经可以作为controller层的输出数据对象了，视图对象VO可以表达为前台展示的xml 、excel文件等数据(具有物理意义的数据组合) 多次的计算可以创建一个函数方法对象(一般来说参数多于3个就可以封装成为一个类了) 关于抽象的使用抽象类是对象的抽象，提供对象的多态方法 为什么要使用抽象 显式的声明需要被继承才可以被使用 提供被继承类的基础变量和基础方法限定必须实现的方法 被继承的类具有抽象类的所有变量和方法，使用代理(反射出抽象类)时可以使用不同继承的同名方法进行差异化处理 什么时候使用抽象 多各类在业务上含有相同的变量 多各类含有在业务上相同作用但实现方式各有区别的方法 显式需要被继承才可以被使用的类，常用于Maven发布的二方库，保证扩展性的同时满足安全性 实现适配器模式 关于接口的使用接口是对方法的抽象，限定类的操作 为什么要使用接口 满足service层的风格 限定类必须实现的方法 传入接口进行handle处理,常用与线程的excutor中，例如: Handle.class 12345class interface Handle&#123; void excute(); void exceptHandle(Exception e);&#125; Process.class 12345678910public todo(Handle handle)&#123;...try &#123; handle.execute(); &#125; catch (Exception e) &#123; e.printStackTrace(); handle.exceptHandle(e); &#125;&#125; 什么时候要使用接口 有多个类需要限定必要的方法实现时 如service层等用于显式用Java doc展示方法API时","tags":[]},{"title":"知乎live总结之《Python入门与进阶》","date":"2017-01-02T14:56:22.000Z","path":"2017/01/02/知乎live总结之《Python入门与进阶》/","text":"写在最前去年年底的时候看到了董伟明老师的知乎Live，第一时间参加了，确实有一定的收获，所以想记录下来，可以拿出来看看，也许能时不时提醒一下自己？（存疑） 知乎Live的连接如下，感兴趣的同学可以支持一下:Python 工程师的入门和进阶 以下的思维导图，仅仅是以自身的角度出发做出的总结，标记蓝色星星的是我认为比较重要或是之前没有引起自己注意的地方。接下来，我也会针对其中的几个小点展开谈谈自己的看法。（其实主要是为了撑一下篇幅）对了，考虑到自己和大家可能都比较懒，对于上图中无法点击的链接如下： code cademy code wars code school 我的Python订阅列表 关于学习 练手项目 看了一定的书有了对新东西的概貌应该就可以在Github上开一个repo，给自己提一些需求搞一个产品出来，或者只是做一个像样的玩具出来。然而之前的我只是当项目来的时候浏览一下Tutorial或是参考同学们的代码，应激式的去搞个实现。当回过来再翻一遍书和Doc时才发现自己的实现是多么的丑陋，之后就是看不下去着手进行重构，这实在是一件不怎么令人愉快的事情。 善于反思 之前提供数据的时候发生了一件有些尴尬的事情，当我为汇报每日抓取可观数据而自得其乐的时候，却不能满足提供给定搜索条件从我那Mongo里提取数据的需求。所幸的是，投机取巧的我，在短时间内依旧改进策略然后提供好了数据，没有加班的我便准备回家屁股了。（我半藏贼6！） 后来便收到了来自Leader的邮件要求反思，于是很理所应当的退出了overwatch，与此同时，工作量就这样上去了，这对于我这种严格贯彻在表面上一定要装作若无其事的装逼患者而言简直是无法忍受的。 其实做一个修正在实现上并不复杂，但我往往便是没有多走那一步。下一次，多想一想，多走一步。 关于工程 遵守一定的开发习惯和流程 对于这一点我从意识上是极其赞同的，尽管我是一个垃圾的程序员，但我仍然不喜欢没有工程思维team member。这应当是我接下去在职业生涯中要去恪守的。 本质上，我们都是有意识的，一个业界共识会让自己和别人都过得轻松一些；我们都不爱说话，一系列契约文档会让自己和别人都少和点水多写两行代码。 关于工作 看重重构 这还有什么什么好说的，每次重构完，不仅神清气爽而且感觉自己棒棒的。 把自己看作PM 特别放在最后重点说一下这个，一方面自己之前确实没有养成这个意识，另一方面也觉得在平时工作中出现的一些问题和没有做到这一点或多或少都有一定的联系。就自己来说，上一点里提到的反思问题便归结于此。 似乎，熟悉了课本和考试，工作了仍然习惯于听从指挥，服从安排，以至于Leader觉得我这人很好用，其实这反而暴露了一些存在的问题。 我总是希望争夺一定话语权，不再是一个“下游”的公司成员，之前对此的实现想法是精进代码做一个好的实现，亦或是交流技术充当一个布道师。当然，这些想法都没有什么问题，但可能还是少了一个指导方针来推进这个目标。当无法高屋建瓴的提供设计落实想法时，一个优美的代码实现除自己以为似乎并不怎么受外人关心；当无法满足前瞻和建设性的解决方案时，优美装逼的技术也可能曲高和寡。","tags":[{"name":"方法论","slug":"方法论","permalink":"http://yoursite.com/tags/方法论/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"第一篇博客 2017 Hello World","date":"2017-01-02T07:30:44.000Z","path":"2017/01/02/第一篇博客-2017-Hello-World/","text":"序今天终于想起把这个建博客的坑给填上了。不管怎么说，也是在家躺够两天咸鱼以后，在2017年里干的第一件正经事，希望它可以帮我记录接下去日子里的收获和感想，也算是做一点点微小的工作。同时也顺便祝大家和自己鸡年大吉吧！ 关于这个博客建立博客的初衷 推进学习速度 跑的比西方记者都还要快！ 训练表达能力 美国那个华莱士比你们不知道高到哪里去了！啊！我给他谈笑风生！ 扩展见识见闻 西方那个国家我没有去过？ 做一点技术和经验的分享 很抱歉，我只是做了一点点微小的工作。 搬运/推荐一些不错的东西 “明明是我先来的。” “你为什么这么熟练？” 博客的主要内容 对于工程工作中的记录 关于实践中的方法论 关于“Idiomatic”的代码实现 一些吐槽和“人生经验” 杂（膜法、哲♂学、白学、装逼技巧 etc.）(划掉)","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]